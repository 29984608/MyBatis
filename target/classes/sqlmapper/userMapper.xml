<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，作用就是对sql进行分类化管理，区分不同的sql空间
注意：使用mapper代理方法开发，namespace有特殊重要作用-->
<mapper namespace="dao.UserDaoMapper">
    <!--动态sql片段
    id:sql片段唯一标识

    基于单表来定义sql片段，这样的话这个sql片段可重用性才高，在sql片段可重用性才高
    在sql片段不要包括where
    -->
    <sql id="qusery_user_where">
        <if test="userCustom.username != null">
            <if test="userCustom.username != null and userCustom.username != ''">
                and username = #{userCustom.username}
            </if>
            <if test="userCustom.sex != null and userCustom.sex != ''">
                and sex like "%${userCustom.sex}%"
            </if>
        </if>
    </sql>

    <!--配置resultMap映射-->
    <resultMap id="PojoresultMap" type="entity.UserBean">
        <id column="i" property="id"></id>
        <result column="us" property="username"></result>
        <result column="ad" property="address"></result>
    </resultMap>
    <!--在映射文件中配置很多sql语句-->
    <!-- 需求：通过id查询用户表的记录-->
    <!--   通过select执行数据库查询
       id：标识映射文件中sql，将sql语句封装到mappedStatement对象中，所以将id称为statement的id
       parameterType：指定输入参数的类型，这里指定int型
       resultType:指定sql输出结果所映射的java对象类型
       #{ }表示一个占位符
       #{id}：其中的id表示接收输入的参数，参数名称就是id-->
    <select id="findUserById" parameterType="int" resultType="entity.UserBean">
    SELECT * FROM user WHERE id = #{id}
    </select>
    <!--根据用户名称模糊查询信息-->
    <!--可能返回多条信息
    ${}：表示拼接sql串，将接收到的参数的内容不加任何修饰拼接在sql中
    使用${}拼接sql，引起sql注入
    ${value}：接收输入参数的内容，如果出入类型是简单类型，${}只能使用value-->
    <select id="findUserByName" parameterType="String" resultType="entity.UserBean">
        SELECT * FROM  user WHERE username LIKE "${value}%"
    </select>
    <!--添加用户-->
    <insert id="insertUser" parameterType="entity.UserBean">
        <!--将插入数据的主键返回
        SELECT Last_insert_ID 得到刚插入的主键值 只适用与自增主键

        keyProperty :将查询到主键值设置到parameterType指定的对象的那个属性
        order:SELECT Last_insert_ID执行顺序，相对于insert语句来说它的执行顺序
        resultType:指定SELECT LAST_INSERT_ID()的结果类型
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO user (username,birthday,sex,address) VALUES(#{username},#{birthday},#{sex},#{address})
    </insert>
    <!--删除用户 通过id-->
    <delete id="deleteUser" parameterType="int">
        DELETE from user where id = #{id}
    </delete>
    <!--修改用户信息 根据id-->
    <update id="updateUser" parameterType="entity.UserBean">
        UPDATE user SET username = #{username},birthday = #{birthday},sex = #{sex},address = #{address} WHERE  id = #{id}
    </update>
    <!--输入映射 包装类型-->
    <select id="findUserByinfo" parameterType="entity.UserQuerVo" resultType="entity.UserCustom">
        SELECT * FROM user
        <where>
            <!--sql片段引用-->
            <include refid="qusery_user_where"></include>
        </where>
    </select>
    <!--输出映射 pojo resultType-->
    <select id="findUserCount" parameterType="entity.UserQuerVo" resultType="int">
        SELECT COUNT(*) FROM  user WHERE username LIKE "%${userCustom.username}%"
    </select>
    <!--输出映射 pojo resultMap-->
    <select id="findUserByResultMap" parameterType="int" resultMap="PojoresultMap">
            SELECT id i,username us, address ad FROM user WHERE id = #{userCustom.id}
        </select>
    <!--输入list集合 foreach遍历-->
    <select id="findUserList" parameterType="entity.UserQuerVo" resultType="entity.UserCustom">
        SELECT * FROM user WHERE
        <!--collection:指定输入对象中集合属性
item:每次遍历生成对象
open:开始遍历时拼接串
close:结束遍历时拼接串
separator:遍历两个对象中需要拼接的串
-->
            <foreach collection="ids" item="id" open="(" close=")" separator="or">
                <!--每次遍历需要拼接的串-->
                id = #{id}
            </foreach>
    </select>
</mapper>
